openapi: 3.0.3
info:
  title: Polzunov.Feast
  version: '0.1'
servers:
  - url: 'http://localhost:8080' #TODO change to real domain
security:
  - bearerAuth: [ ]
tags:
  - name: user
  - name: admin
  - name: event
  - name: route

paths:
  ###################################### user ##########################################################################
  /user/signin:
    post:
      summary: Sign in new user
      operationId: signInUser
      security: [ ]
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: User authenticated, token of type "Bearer" passed in the body
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Wrong password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Username not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/signup:
    post:
      summary: Sign up new user
      operationId: signUpUser
      security: [ ]
      tags:
        - user
      requestBody:
        description: User to sign up
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User signed up, authentication token of type "Bearer" passed in the body
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username, email or phone number already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user:
    put:
      summary: Update user profile info
      operationId: updateUser
      tags:
        - user
      requestBody:
        description: User object with new data. *Password can be null, if it doesn't need to be updated.*
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated user with *password=null*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '409':
          description: Username, email or phone number already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Get user info *without password*
      operationId: getUser
      tags:
        - user
      responses:
        '200':
          description: User info
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete user
      operationId: deleteUser
      tags:
        - user
      responses:
        '200':
          description: User deleted
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'



  ##################################### event ##########################################################################
  /event:
    get:
      summary: Get all events
      operationId: getAllEvents
      security: [ ] #Events can be obtained by any user, including unauthorized one
      tags:
        - event
      responses:
        '200':
          description: Events sent
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create new event
      operationId: createEvent
      tags:
        - event
        - admin
      requestBody:
        description: Event to create
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update event by id
      operationId: updateEventById
      tags:
        - event
        - admin
      requestBody:
        description: Event object with new data
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /event/{id}:
    get:
      summary: Get event by id
      operationId: getEventById
      security: [ ] #Event can be obtained by any user, including unauthorized one
      tags:
        - event
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Event found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete event by id
      operationId: deleteEventById
      tags:
        - event
        - admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Event deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'


  ############################################ route ###################################################################
  /route/get:
    get:
      summary: Получение маршрута пользователя.
      operationId: getUserRoute
      tags:
        - route
      responses:
        '200':
          description: Маршрут отправлен.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
        '500':
          description: INTERNAL SERVER ERROR

  /route/createNew:
    post:
      summary: Сохранение нового маршрута.
      operationId: createNewUserRoute
      tags:
        - route
      requestBody:
        description: Передается новый объект Route.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: Маршрут сохранен.
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
        '500':
          description: INTERNAL SERVER ERROR

  /route/update:
    post:
      summary: Обновление существующего маршрута.
      operationId: updateUserRoute
      tags:
        - route
      requestBody:
        description: Передается объект Route с новыми данными.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: Изменения маршрута сохранены.
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
        '500':
          description: INTERNAL SERVER ERROR

  /route/delete:
    get:
      summary: Удаление маршрута пользователя.
      operationId: deleteUserRoute
      tags:
        - route
      responses:
        '200':
          description: Маршрут удален.
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
        '500':
          description: INTERNAL SERVER ERROR
#################################### Components ########################################################################
components:
  securitySchemes:
    bearerAuth:
      type: http #TODO change to https
      scheme: bearer
      bearerFormat: JWT

  responses:
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    TokenUnauthorized:
      description: Token authorization failed, relogin required
    NotFound:
      description: Not found

  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        objectValidationViolations:
          type: array
          items:
            $ref: '#/components/schemas/ObjectValidationViolation'
        fieldValidationViolations:
          type: array
          items:
            $ref: '#/components/schemas/FieldValidationViolation'
        httpAttributeValidationViolation:
          type: array
          items:
            $ref: '#/components/schemas/HttpAttributeValidationViolation'
    ObjectValidationViolation:
      type: object
      properties:
        message:
          type: string
    FieldValidationViolation:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
    HttpAttributeValidationViolation:
      type: object
      properties:
        attribute:
          type: string
        message:
          type: string

    Token:
      type: object
      properties:
        accessToken:
          type: string
          format: JWT
          example: eyJraWQiOiJmNmQ2YjE0NC1jMTMwLTQ5YjgtYTc1MC04ZTEzMTIzYzU4YzciLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoiMSIsImV4cCI6MTY3OTc2MDY1NCwiaWF0IjoxNjc5NzU3MDU0LCJzY29wZSI6IlJPTEVfVVNFUiJ9.e7uKeUlNO3pt_erR23LxplEzWA5DhTYlP5SsM4NtF2Y-GJgEJ3BSJnAKj_wh4V9H417J-ck_UiSy749gbCWGDxjXfSWeBYLCQeKd6_cS8V5l73yIYWf1YDznO8sVyX8GT1SS6LqEescE5JUIH6t0SUgsbLa9QPTNXAEkf9pQ7m4mv--9sfJ7Pgk7pjRSxgkNaVPq8OhcDjnSFHSg7SAc3FlJmDrtP6yiu4TOqsBoqPeneDFWjWSTyE0FS0Vu1fa6OYLFq0Z9gMZa4ohTKkWsKqjF4ND2vSduVni5s3hw-Loft0Wmw697us9DHxs8qVOPEsIS3231VDPbZ9QkhCjQ1w
        tokenType:
          type: string
          example: "Bearer"
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
        phone:
          type: string
        email:
          type: string
    Credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Event:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        startTime:
          type: string
          format: yyyy-MM-ddTHH:mm:ss
        endTime:
          type: string
          format: yyyy-MM-ddTHH:mm:ss
        place:
          $ref: '#/components/schemas/Place'
    Place:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double

    Route:
      type: object
      properties:
        id:
          type: integer
        routeNodes:
          type: array
          items:
            $ref: '#/components/schemas/RouteNode'
    RouteNode:
      type: object
      properties:
        id:
          type: integer
        event:
          $ref: '#/components/schemas/Event'