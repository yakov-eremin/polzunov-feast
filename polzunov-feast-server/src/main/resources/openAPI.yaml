openapi: 3.0.3
info:
  title: Polzunov.Feast
  version: '0.1'
servers:
  - url: 'http://localhost:8080' #TODO change to real domain
security:
  - bearerAuth: [ ]
tags:
  - name: user
  - name: admin
  - name: event
  - name: route
  - name: place
  - name: category

paths:
  ###################################### user ##########################################################################
  /user/signin:
    post:
      summary: Sign in new user
      operationId: signInUser
      security: [ ]
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        200:
          description: User authenticated, token of type "Bearer" passed in the body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          description: Wrong password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Username not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'

  /user/signup:
    post:
      summary: Sign up new user
      operationId: signUpUser
      security: [ ]
      tags:
        - user
      requestBody:
        description: User to sign up
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User signed up, authentication token of type "Bearer" passed in the body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          description: Username, email or phone number already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'

  /user:
    put:
      summary: Update user profile info
      operationId: updateUser
      tags:
        - user
      requestBody:
        description: User object with new data. *Password can be null, if it doesn't need to be updated.*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Updated user with *password=null*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        409:
          description: Username, email or phone number already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Get user info without password
      operationId: getUser
      tags:
        - user
      responses:
        200:
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete user
      operationId: deleteUser
      tags:
        - user
      responses:
        200:
          description: User deleted
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  ##################################### place ##########################################################################
  /place:
    post:
      summary: Create new place
      operationId: addPlace
      tags:
        - place
        - admin
      requestBody:
        description: Place to create. *Id can be every random integer value, because provided id will be substituted with generated one*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
      responses:
        200:
          description: Place created, *it will have generated id*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        404:
          description: Admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update place by id
      operationId: updatePlaceById
      tags:
        - place
        - admin
      requestBody:
        description: Place to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
      responses:
        200:
          description: Place updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        404:
          description: Admin or place not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Get all places
      operationId: getAllPlaces
      security: [ ]
      tags:
        - place
      parameters:
        - in: query
          name: page
          description: Index of first page to return
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: size
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            default: 10
      responses:
        200:
          description: Places sent
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /place/{id}:
    parameters:
      - in: path
        name: id
        description: Place id
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get place by id
      operationId: getPlaceById
      security: [ ]
      tags:
        - place
      responses:
        200:
          description: Place sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        404:
          description: Place not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete place by id
      operationId: deletePlaceById
      tags:
        - place
        - admin
      responses:
        200:
          description: Place deleted
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        404:
          description: Admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Cannot delete place, because there are events associated with it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'

    ##################################### event ##########################################################################
  /event:
    post:
      summary: Create new event
      operationId: addEvent
      tags:
        - event
        - admin
      requestBody:
        description: |
          Event to create. 
           - *Id can be every random integer value, because provided id will be substituted with generated one*
           - Field 'canceled' may not be present, because it will be set to false anyway
           - Not found and duplicated categories will be ignored
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          description: Event created, *it will have generated id*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventWithPlaceResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        404:
          description: Admin or place not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update event by id
      operationId: updateEventById
      tags:
        - event
        - admin
      requestBody:
        description: Event object with new data. Not found and duplicated categories will be ignored
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventWithPlaceResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        404:
          description: Admin, place or event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: |
            This checks will *not* be performed if event is canceled:
            - Event has already started
            - It's in someone's route
        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Get all events
      operationId: getAllEvents
      security: [ ]
      tags:
        - event
      parameters:
        - in: query
          name: page
          description: Index of first page to return
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: size
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            default: 10
      responses:
        200:
          description: Events sent
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventWithPlaceResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /event/{id}:
    parameters:
      - in: path
        name: id
        description: Place id
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get event by id
      operationId: getEventById
      security: [ ]
      tags:
        - event
      responses:
        200:
          description: Event found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventWithPlaceResponse'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete event by id
      operationId: deleteEventById
      tags:
        - event
        - admin
      responses:
        200:
          description: Event deleted
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        404:
          description: Admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Cannot delete event, because there are routes associated with it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'
  
  ##################################### category #######################################################################
  /category:
    post:
      summary: Create new category
      operationId: addCategory
      tags:
        - category
        - admin
      requestBody:
        description: |
         Category to create. 
          - *Id can be every random integer because provided id will be substituted with generated one*
          - Category name must be unique. Uniqueness check is case-sensitive
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Category created, *it will have generated id*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        404:
          description: Admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Category with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update category by id
      operationId: updateCategoryById
      tags:
        - category
        - admin
      requestBody:
        description: Category object with new data. *Category name must be unique. Uniqueness check is case-sensitive*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          description: Admin or category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Category with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Get all categories
      operationId: getAllCategories
      security: [ ]
      tags:
        - category
      responses:
        200:
          description: Categories sent
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /category/{id}:
    parameters:
      - in: path
        name: id
        description: Category id
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get category by id
      operationId: getCategoryById
      security: [ ]
      tags:
        - category
      responses:
        200:
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete category by id
      operationId: deleteCategoryById
      tags:
        - category
        - admin
      responses:
        200:
          description: Category deleted
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        404:
          description: Admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Cannot delete category, because there are events associated with it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'
  
  ############################################ route ###################################################################
  /route:
    put:
      summary: Update user's route. If there is no route, it will be created and updated.
      description: |
        Route's nodes will be ordered by events' start time from earliest to latest.
        
         **Note:** if nodes contains duplicated event ids, duplicates will be ignored
      operationId: updateRouteByUserId
      tags:
        - route
      requestBody:
        description: Route object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        200:
          description: Route updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteWithEventResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        404:
          description: User or event(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: |
            * The time of one event overlaps the time of another (e.g., two events with the same start time)
            * Some events have already ended
            * Some events are canceled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Get user's route. If there is no route, it will be created and sent.
      description: Route's nodes will be ordered by events' start time from earliest to latest
      operationId: getRouteByUserId
      tags:
        - route
      responses:
        200:
          description: Route sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteWithEventResponse'
        401:
          $ref: '#/components/responses/TokenUnauthorized'
        404:
          description: User not found
        500:
          $ref: '#/components/responses/InternalServerError'

#################################### Components ########################################################################
components:
  securitySchemes:
    bearerAuth:
      type: http #TODO change to https
      scheme: bearer
      bearerFormat: JWT

  responses:
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    TokenUnauthorized:
      description: Token authorization failed, relogin required
    NotFound:
      description: Not found

  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        objectValidationViolations:
          type: array
          items:
            $ref: '#/components/schemas/ObjectValidationViolation'
        fieldValidationViolations:
          type: array
          items:
            $ref: '#/components/schemas/FieldValidationViolation'
        httpAttributeValidationViolation:
          type: array
          items:
            $ref: '#/components/schemas/HttpAttributeValidationViolation'
    ObjectValidationViolation:
      type: object
      properties:
        message:
          type: string
    FieldValidationViolation:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
    HttpAttributeValidationViolation:
      type: object
      properties:
        attribute:
          type: string
        message:
          type: string

    Token:
      type: object
      properties:
        accessToken:
          type: string
          format: JWT
          example: eyJraWQiOiJmNmQ2YjE0NC1jMTMwLTQ5YjgtYTc1MC04ZTEzMTIzYzU4YzciLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoiMSIsImV4cCI6MTY3OTc2MDY1NCwiaWF0IjoxNjc5NzU3MDU0LCJzY29wZSI6IlJPTEVfVVNFUiJ9.e7uKeUlNO3pt_erR23LxplEzWA5DhTYlP5SsM4NtF2Y-GJgEJ3BSJnAKj_wh4V9H417J-ck_UiSy749gbCWGDxjXfSWeBYLCQeKd6_cS8V5l73yIYWf1YDznO8sVyX8GT1SS6LqEescE5JUIH6t0SUgsbLa9QPTNXAEkf9pQ7m4mv--9sfJ7Pgk7pjRSxgkNaVPq8OhcDjnSFHSg7SAc3FlJmDrtP6yiu4TOqsBoqPeneDFWjWSTyE0FS0Vu1fa6OYLFq0Z9gMZa4ohTKkWsKqjF4ND2vSduVni5s3hw-Loft0Wmw697us9DHxs8qVOPEsIS3231VDPbZ9QkhCjQ1w
        tokenType:
          type: string
          example: "Bearer"
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
        phone:
          type: string
        email:
          type: string
    Credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
          example: 2019-01-01T00:00:00+3:00
        endTime:
          type: string
          format: date-time
          example: 2019-01-01T01:00:00+3:00
        placeId:
          type: integer
          format: int64
        canceled:
          type: boolean
          default: false
        categoryIds:
          type: array
          uniqueItems: true
          items:
            type: integer
            format: int64
        ageLimit:
          description: Only people whose age >= ageLimit are allowed
          type: integer
          format: int32
          default: 0
    EventWithPlaceResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
          example: 2019-01-01T00:00:00+3:00
        endTime:
          type: string
          format: date-time
          example: 2019-01-01T01:00:00+3:00
        place:
          $ref: '#/components/schemas/Place'
        canceled:
          type: boolean
          default: false
        categories:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Category'
        ageLimit:
          description: Only people whose age >= ageLimit are allowed
          type: integer
          format: int32
          default: 0
    
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    Place:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          type: string

    Route:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/RouteNode'
    RouteWithEventResponse:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/RouteNodeWithEventResponse'

    RouteNode:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
    RouteNodeWithEventResponse:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/EventWithPlaceResponse'