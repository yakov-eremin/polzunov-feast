#Before making any changes in error messages examples, ensure you've changed ErrorResponseMessages.properties accordingly


openapi: 3.0.3
info:
  title: OpenAPI Specification for Polzunov.Feast
  version: '0.1'
  description: |
    <details>
      <summary>Additional API requests info</summary>
      If user tries to access nonexistent path, response will be the following:
      ```
      Code: 404
      Body:
      {
        "message": "this path doesn't exist",
        "validationViolations": null
      }
      ```
    </details>
servers:
  - url: 'http://localhost:8080' #TODO change to real domain
security:
  - bearerAuth: []
tags:
  - name: user
    description: Requests related to users
  - name: admin
    description: Requests related to admins
  - name: event
    description: Request related to events
  - name: route
    description: Операции, связанные с маршрутом

paths:
  ###################################### user ############################################################################
  /user/signin:
    post:
      summary: Authenticate user
      operationId: signInUser
      security: []
      tags:
        - user
      requestBody:
        description: Username and password provided in the body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        '200':
          description: User authenticated, token of type "Bearer" passed in the body
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/ValidationFailedBadRequest'
        '401':
          description: Wrong password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "incorrect password"
                validationViolations: null
        '404':
          description: Username not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "username wasn't found"
                validationViolations: null
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/signup:
    post:
      summary: Sign up new user
      operationId: signUpUser
      security: []
      tags:
        - user
      requestBody:
        description: User to sign up
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: User signed up, authentication token of type "Bearer" passed in the body
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/ValidationFailedBadRequest'
        '409':
          description: |
            Occurs if:
            * Username already taken
            * Email already taken
            * Phone number already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Username already taken:
                  value:
                    message: "username was already taken"
                    validationViolations: null
                Email already taken:
                  value:
                    message: "email was already taken"
                    validationViolations: null
                Phone number already taken:
                  value:
                    message: "phone number was already taken"
                    validationViolations: null
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user:
    put:
      summary: Update user profile info
      operationId: updateUser
      tags:
        - user
      requestBody:
        description: User object with new data. All fields will be updated regardless of the values, that's why if some fields do not need to be updated, their previous values should be passed.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: User updated
        '400':
          $ref: '#/components/responses/ValidationFailedBadRequest'
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '409':
          description: |
            Occurs if:
            * Username already taken
            * Email already taken
            * Phone number already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Username already taken:
                  value:
                    message: "username was already taken"
                    validationViolations: null
                Email already taken:
                  value:
                    message: "email was already taken"
                    validationViolations: null
                Phone number already taken:
                  value:
                    message: "phone number was already taken"
                    validationViolations: null
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete user
      operationId: deleteUser
      tags:
        - user
      responses:
        '200':
          description: User deleted
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ##################################### event ###########################################################################
  /event:
    get:
      summary: Get all events
      operationId: getAllEvents
      security: [] #Events can be obtained by any user, including unauthorized one
      tags:
        - event
      responses:
        '200':
          description: Events sent
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create new event
      operationId: createEvent
      tags:
        - event
        - admin
      requestBody:
        description: Event to create
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Event created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/ValidationFailedBadRequest'
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update event by id
      operationId: updateEventById
      tags:
        - event
        - admin
      requestBody:
        description: Event object with new data. All fields will be updated regardless of the values, that's why if some fields do not need to be updated, their previous values should be passed.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Event updated
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/ValidationFailedBadRequest'
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /event/{id}:
    get:
      summary: Get event by id
      operationId: getEventById
      security: [] #Event can be obtained by any user, including unauthorized one
      tags:
        - event
      parameters:
        - in: path
          name: id
          description: Must be positive
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Event found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/ValidationFailedBadRequest'
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete event by id
      operationId: deleteEventById
      tags:
        - event
        - admin
      parameters:
        - in: path
          name: id
          description: Must be positive
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Event deleted
        '400':
          $ref: '#/components/responses/ValidationFailedBadRequest'
        '401':
          $ref: '#/components/responses/TokenUnauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'


  ############################################ route #####################################################################
  /route/get:
    get:
      summary: Получение маршрута пользователя.
      operationId: getUserRoute
      tags:
        - route
      responses:
        '200':
          description: Маршрут отправлен.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
        '500':
          description: INTERNAL SERVER ERROR

  /route/createNew:
    post:
      summary: Сохранение нового маршрута.
      operationId: createNewUserRoute
      tags:
        - route
      requestBody:
        description: Передается новый объект Route.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: Маршрут сохранен.
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
        '500':
          description: INTERNAL SERVER ERROR

  /route/update:
    post:
      summary: Обновление существующего маршрута.
      operationId: updateUserRoute
      tags:
        - route
      requestBody:
        description: Передается объект Route с новыми данными.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: Изменения маршрута сохранены.
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
        '500':
          description: INTERNAL SERVER ERROR

  /route/delete:
    get:
      summary: Удаление маршрута пользователя.
      operationId: deleteUserRoute
      tags:
        - route
      responses:
        '200':
          description: Маршрут удален.
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
        '500':
          description: INTERNAL SERVER ERROR
#################################### Components ########################################################################
components:
  securitySchemes:
    bearerAuth:
      type: http #TODO change to https
      scheme: bearer
      bearerFormat: JWT
  responses:
    InternalServerError:
      description: Internal server error
    ValidationFailedBadRequest:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "validation failed"
            validationViolations: [
              {
                fieldName: "field name (e.g., email)",
                message: "what's wrong with this field (e.g., must not be null)"
              },
              {
                fieldName: "field name",
                message: "something is wrong"
              }
            ]
    TokenUnauthorized:
      description: Token authorization failed, relogin required
    UnsupportedMediaType:
      description: |
        Occurs if:
        * Content type, specified in _Content-Type_ header, is not supported by the server
        * Server cannot generate response with a media type, specified in _Accept_ header. **In that case response body is empty**
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "content type is not supported"
            validationViolations: null
    NotFound:
      description: Not found

  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        validationViolations:
          type: array
          items:
            $ref: '#/components/schemas/ValidationViolation'
    ValidationViolation:
      type: object
      properties:
        fieldName:
          type: string
        message:
          type: string
    Token:
      type: object
      properties:
        accessToken:
          type: string
          format: JWT
          example: eyJraWQiOiJmNmQ2YjE0NC1jMTMwLTQ5YjgtYTc1MC04ZTEzMTIzYzU4YzciLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoiMSIsImV4cCI6MTY3OTc2MDY1NCwiaWF0IjoxNjc5NzU3MDU0LCJzY29wZSI6IlJPTEVfVVNFUiJ9.e7uKeUlNO3pt_erR23LxplEzWA5DhTYlP5SsM4NtF2Y-GJgEJ3BSJnAKj_wh4V9H417J-ck_UiSy749gbCWGDxjXfSWeBYLCQeKd6_cS8V5l73yIYWf1YDznO8sVyX8GT1SS6LqEescE5JUIH6t0SUgsbLa9QPTNXAEkf9pQ7m4mv--9sfJ7Pgk7pjRSxgkNaVPq8OhcDjnSFHSg7SAc3FlJmDrtP6yiu4TOqsBoqPeneDFWjWSTyE0FS0Vu1fa6OYLFq0Z9gMZa4ohTKkWsKqjF4ND2vSduVni5s3hw-Loft0Wmw697us9DHxs8qVOPEsIS3231VDPbZ9QkhCjQ1w
        tokenType:
          type: string
          example: "Bearer"
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
        phone:
          type: string
        email:
          type: string
    Credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        timeStart:
          type: string
        timeEnd:
          type: string
        place:
          $ref: '#/components/schemas/Place'
    Place:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    Route:
      type: object
      properties:
        id:
          type: integer
        routeNodes:
          type: array
          items:
            $ref: '#/components/schemas/RouteNode'
    RouteNode:
      type: object
      properties:
        id:
          type: integer
        event:
          $ref: '#/components/schemas/Event'
        currentTransport:
          $ref: '#/components/schemas/Transport'
        movingTime:
          type: integer
        estimateArrivingTime:
          type: integer
        possibleTransport:
          type: array
          items:
            $ref: '#/components/schemas/Transport'
    Transport:
      type: string
      enum:
        - foot
        - bus
        - car